
#include <stdio.h>
#define max 25
void main()
{
int frag[max], b[max], f[max], i, j, nb, nf, temp;
static int bf[max], ff[max];
printf("\n\tMemory Management Scheme - First Fit");
printf("\nEnter the number of blocks:");
scanf("%d", &nb);
printf("Enter the number of files:");
scanf("%d", &nf);
printf("\nEnter the size of the blocks:-\n");
for (i = 1; i <= nb; i++)
{
printf("Block %d:", i);
scanf("%d", &b[i]);
}
printf("Enter the size of the files :-\n");
for (i = 1; i <= nf; i++)
{
printf("File %d:", i);
scanf("%d", &f[i]);
}
for (i = 1; i <= nf; i++)
{
temp = -1; // Initialize temp to -1 before comparing
for (j = 1; j <= nb; j++)
{
if (bf[j] != 1 && b[j] >= f[i]) // Check if the block is free and has sufficient space
{
temp = j; // Store the block number
break; // Exit the loop after finding the block
}
}
if (temp != -1) // If a suitable block is found
{
ff[i] = temp; // Store the block number for the file
bf[temp] = 1; // Mark the block as allocated
frag[i] = b[temp] - f[i]; // Calculate fragmentation
}
}
printf("\nFile_no:\tFile_size :\tBlock_no:\tBlock_size:\tFragmentation");
for (i = 1; i <= nf; i++)
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d", i, f[i], ff[i], b[ff[i]], frag[i]);
}
